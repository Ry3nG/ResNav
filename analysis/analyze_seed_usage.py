#!/usr/bin/env python3
"""Analyze seed usage patterns in training and evaluation.

This script checks what seed ranges are actually used in the codebase
and whether 20021213 falls within the expected range.
"""

import numpy as np
from typing import List, Tuple


def analyze_seed_usage():
    """Analyze how seeds are used in the codebase."""

    print("Seed Usage Analysis")
    print("=" * 50)

    # Training seeds
    print("1. Training seeds:")
    print("   - Base seed: args.seed (default=0)")
    print("   - Environment seeds: base_seed + i for i in range(n_envs)")
    print("   - Example with n_envs=16, base_seed=0:")
    print("     Seeds: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]")
    print("   - Eval environment: base_seed + 1000")
    print("     Eval seed: 1000")

    # Evaluation seeds (benchmark.py)
    print("\n2. Evaluation seeds (benchmark.py):")
    print("   - Base seed: args.seed (default=0)")
    print("   - Episode seeds: rng.integers(0, 1_000_000)")
    print("   - This generates random seeds in range [0, 999999]")

    # Rollout seeds (rollout.py)
    print("\n3. Rollout seeds (rollout.py):")
    print("   - Direct seed: args.seed (default=0)")
    print("   - Used directly for environment reset")

    # Check if 20021213 is in expected ranges
    print("\n4. Seed 20021213 analysis:")
    print(f"   - Value: {20021213}")
    print(f"   - In training range [0, 15]: {0 <= 20021213 <= 15}")
    print(f"   - In eval range [0, 999999]: {0 <= 20021213 <= 999999}")
    print(f"   - In eval range: {'YES' if 0 <= 20021213 <= 999999 else 'NO'}")

    # Simulate actual seed generation
    print("\n5. Simulating actual seed generation:")

    # Training simulation
    base_seed = 0
    n_envs = 16
    train_seeds = [base_seed + i for i in range(n_envs)]
    eval_seed = base_seed + 1000
    print(f"   Training seeds: {train_seeds}")
    print(f"   Eval seed: {eval_seed}")

    # Benchmark simulation
    rng = np.random.default_rng(0)
    benchmark_seeds = [int(rng.integers(0, 1_000_000)) for _ in range(10)]
    print(f"   Sample benchmark seeds: {benchmark_seeds}")

    # Check if 20021213 appears in any simulation
    print(f"\n6. Is 20021213 in training seeds? {20021213 in train_seeds}")
    print(f"   Is 20021213 in eval seed? {20021213 == eval_seed}")
    print(f"   Is 20021213 in sample benchmark seeds? {20021213 in benchmark_seeds}")

    # Test with different base seeds
    print("\n7. Testing with different base seeds:")
    for base in [0, 100, 1000, 10000]:
        train_seeds = [base + i for i in range(16)]
        eval_seed = base + 1000
        in_train = 20021213 in train_seeds
        in_eval = 20021213 == eval_seed
        print(f"   Base {base}: train={in_train}, eval={in_eval}")

    # Check if 20021213 could be a benchmark seed
    print(f"\n8. Benchmark seed probability analysis:")
    print(f"   - Benchmark uses rng.integers(0, 1_000_000)")
    print(f"   - This generates seeds in range [0, 999999]")
    print(f"   - 20021213 > 999999, so it CANNOT be a benchmark seed")

    return {
        'training_seeds': train_seeds,
        'eval_seed': eval_seed,
        'benchmark_range': (0, 999999),
        'is_valid_training': 20021213 in train_seeds,
        'is_valid_eval': 20021213 == eval_seed,
        'is_valid_benchmark': 0 <= 20021213 <= 999999
    }


def test_seed_20021213_generation():
    """Test if seed 20021213 can be generated by any of the methods."""

    print("\n" + "="*60)
    print("Testing if seed 20021213 can be generated")
    print("="*60)

    # Method 1: Training environment seeds
    print("Method 1: Training environment seeds")
    print("  Formula: base_seed + i, where i in [0, n_envs-1]")
    print("  To get 20021213: base_seed + i = 20021213")
    print("  So: base_seed = 20021213 - i")
    print("  Valid if base_seed >= 0 and i in [0, n_envs-1]")

    n_envs = 16
    valid_base_seeds = []
    for i in range(n_envs):
        base_seed = 20021213 - i
        if base_seed >= 0:
            valid_base_seeds.append((base_seed, i))

    print(f"  Valid combinations: {valid_base_seeds}")

    # Method 2: Eval environment seed
    print("\nMethod 2: Eval environment seed")
    print("  Formula: base_seed + 1000 = 20021213")
    print("  So: base_seed = 20021213 - 1000 = 20011213")
    print("  Valid if base_seed >= 0: YES")

    # Method 3: Benchmark seeds
    print("\nMethod 3: Benchmark seeds")
    print("  Formula: rng.integers(0, 1_000_000)")
    print("  Range: [0, 999999]")
    print("  20021213 > 999999, so NOT POSSIBLE")

    # Method 4: Direct seed in rollout
    print("\nMethod 4: Direct seed in rollout")
    print("  Formula: args.seed = 20021213")
    print("  This is possible if user explicitly sets --seed 20021213")

    print(f"\nCONCLUSION:")
    print(f"  - Seed 20021213 CAN be generated in training if base_seed >= 20021197")
    print(f"  - Seed 20021213 CAN be generated in eval if base_seed = 20011213")
    print(f"  - Seed 20021213 CANNOT be generated in benchmark (out of range)")
    print(f"  - Seed 20021213 CAN be used in rollout if explicitly set")

    return {
        'can_be_training': len(valid_base_seeds) > 0,
        'can_be_eval': True,
        'can_be_benchmark': False,
        'can_be_rollout': True,
        'valid_training_combinations': valid_base_seeds
    }


def check_if_seed_20021213_is_problematic():
    """Check if seed 20021213 is problematic due to its magnitude."""

    print("\n" + "="*60)
    print("Checking if seed 20021213 is problematic")
    print("="*60)

    # Test the seed with numpy random generator
    print("Testing with numpy.random.default_rng(20021213):")

    rng = np.random.default_rng(20021213)

    # Test corridor width generation
    corridor_widths = []
    for _ in range(100):
        # Simulate corridor width generation
        cw_min, cw_max = 3.0, 5.0
        corridor_w = float(rng.uniform(cw_min, cw_max))
        corridor_widths.append(corridor_w)

    print(f"  Generated corridor widths: min={min(corridor_widths):.3f}, max={max(corridor_widths):.3f}")
    print(f"  Mean: {np.mean(corridor_widths):.3f}")

    # Test pallet placement
    print("\nTesting pallet placement with seed 20021213:")

    # Reset generator
    rng = np.random.default_rng(20021213)

    # Simulate pallet placement logic
    corridor_w = float(rng.uniform(3.0, 5.0))
    pallet_w_eff = 1.2
    min_passage = 0.7

    print(f"  Corridor width: {corridor_w:.3f}")
    print(f"  Min passage required: {min_passage}")
    print(f"  Available space for pallet: {corridor_w - min_passage:.3f}")

    # Check if this could create problematic pallets
    max_pallet_width = corridor_w - min_passage
    print(f"  Max safe pallet width: {max_pallet_width:.3f}")
    print(f"  Pallet width effective: {pallet_w_eff}")
    print(f"  Could create narrow passages: {'YES' if pallet_w_eff > max_pallet_width else 'NO'}")

    return {
        'corridor_width': corridor_w,
        'max_safe_pallet_width': max_pallet_width,
        'could_be_problematic': pallet_w_eff > max_pallet_width
    }


if __name__ == "__main__":
    # Analyze seed usage patterns
    usage_info = analyze_seed_usage()

    # Test if seed 20021213 can be generated
    generation_info = test_seed_20021213_generation()

    # Check if the seed itself is problematic
    problematic_info = check_if_seed_20021213_is_problematic()

    print("\n" + "="*60)
    print("FINAL CONCLUSION")
    print("="*60)
    print("1. Seed 20021213 IS a valid seed that can be generated in:")
    print("   - Training (with high base_seed values)")
    print("   - Eval (with base_seed = 20011213)")
    print("   - Rollout (if explicitly set)")
    print("2. Seed 20021213 CANNOT be generated in:")
    print("   - Benchmark evaluation (out of range)")
    print("3. The seed itself may be problematic because:")
    print(f"   - It generates corridor width: {problematic_info['corridor_width']:.3f}m")
    print(f"   - Max safe pallet width: {problematic_info['max_safe_pallet_width']:.3f}m")
    print(f"   - Could create narrow passages: {problematic_info['could_be_problematic']}")
    print("4. Therefore, seed 20021213 is a LEGITIMATE but PROBLEMATIC seed")
    print("   that could be generated during training/eval and create infeasible maps.")
